{"name":"Jquery-smallutils-plugins","body":"jQuery Plugins\r\n==============\r\n\r\nThis repository provides small utils for jQuery.\r\n\r\nBetter typeof(), make closure, Date utils, Number utils, URLize, form utils and HTML based template.\r\n\r\n\r\njquery-utils.js\r\n--------------\r\n\r\nSmall utils.\r\n\r\n### better typeof\r\n\r\n    $.typeOf(v)\r\n    -> \"null\",\"undefined\",\"boolean\",\"number\",\"string\",\"array\",\"date\",\"regexp\",\"object\"\r\n\r\n### make closure function\r\n\r\n    $.closure(args,thisobj,func)\r\n\r\nex)\r\n\r\n    var f = $.closure([1,2],{a:3},function(_a,_b,c){print _a,_b,c,this});\r\n    f(4);\r\n    -> 1,2,4,{a:3}\r\n\r\n### $.Deferred setTimeout (with closure)\r\n\r\n    $.doLater(func,delay);\r\n    $.doLaterWith(args, thisobj, func,delay);\r\n\r\nex)\r\n\r\n    $.doLater(function(){print '1'}).then(function(){\r\n    \tprint 'success';\r\n    },100).fail(function(ex){\r\n    \talert('exception:'+ex.toString():);\r\n    });\r\n    $.doLaterWith([1,2],null,function(_a,_b){print _1}).then(function(){\r\n    \tprint 'success';\r\n    },100).fail(function(ex){\r\n    \talert('exception:'+ex.toString():);\r\n    });\r\n\r\n### Date utils\r\n\r\n#### parse ISO8601 string to Date()\r\n\r\n    $.parseISO8601('1970-01-01T00:00:00Z');\r\n    -> Date(0)\r\n\r\n#### format Date() to String by format\r\n\r\n    $.dateformat(date,formatstr)\r\n\r\nex)\r\n\r\n\t$.dateformat(new Date(0), 'yyyy/MM/dd HH:mm');\r\n\t-> \"1970/01/01 00:00\" (localtime)\r\n\r\n### Number utils\r\n\r\n#### comma separated string for number\r\n\r\n    $.numformat.comma3(1234)\r\n    -> \"1,234\"\r\n    $.numformat.comma3(1234.5678)\r\n    -> \"1,234.5678\"\r\n\r\n#### round any decimal position and padding 0\r\n\r\n\t$.numformat.round(num, posisition, pad0_flag)\r\n\r\nex)\r\n\r\n\t$.numformat.round(1.445, -2) -> 1.45\r\n\t$.numformat.round(1.499, -2) -> 1.50\r\n\t$.numformat.round(149,1) -> 150\r\n\r\n\r\n#### kilo, mega (shortcut: round(num, 1024, false),round(num, 1024*1024, false)\r\n\r\n    $.numformat.kilo(1024*10)\r\n    -> 10\r\n    $.numformat.mega(1024*1024*10)\r\n    -> 10\r\n\r\n\r\n### Resolve object by String\r\n\r\n    $.resolve({a:{b:{c:1}}}, 'b.c') -> 1\r\n    $.resolve({a:{b:[{c:2}]}}, 'b[0].c') -> 2\r\n\r\n\r\njquery-urlize.js\r\n----------------\r\n\r\n### URLize ( text to HTML with URLized/&lt;BR&gt; )\r\n\r\n    $.urlize(text)\r\n\r\nConvert text to escaped html.\r\n'http://...','https://...','ftp://...' convert to to &lt;a> and linebreaks convert to &lt;br>\r\n\r\n    $().urlize(text)\r\n\r\nurlized $().text(text)\r\n\r\nex)\r\n\r\n    $('div').urlize(\r\n        \"This text is urlized and linebreaksbred.\\n\"\r\n        + \"http://www.jquery.com/ urlized to <a target=\"_taret\" href=\"http://www.jquery.com/\">http://www.jquery.com</a>,\\n\"\r\n        + \"and all linebreaks converted to <br>\"\r\n    )\r\n\r\n\r\n\r\njquery-form.js\r\n--------------\r\n\r\nform values helper.\r\n\r\n### Get form :input values as Object\r\n\r\n    $(form).formGet()\r\n\r\nex)\r\n\r\n    $('<form><input name=\"a\" value=\"b\"></form>')).formGet()\r\n    -> {'a':'b'}\r\n    $('<form>'\r\n        +'<input name=\"a\" value=\"b\">'\r\n        +'<input name=\"a\" value=\"c\">'\r\n        +'</form>'\r\n    ).formGet()\r\n    -> {'a':['b','c']}\r\n\r\n\r\n### Set form :input values with Object\r\n\r\n    $(form).formSet(obj)\r\n\r\nex)\r\n\r\n    $(form).formSet({\r\n        'text':'value1',\r\n        'cb':['chk1','chk3']\r\n    });\r\n\r\n\r\n### Clear form :input values\r\n\r\n    $(form).formClear()\r\n\r\nunset all input values in form - not 'reset'\r\n\r\n\r\n### POST form by Ajax\r\n\r\n\t$(form).formPost(opts)\r\n\r\nex)\r\n\r\n    <form>\r\n        <span class=\"error_msg\" data-for=\"@all\">error for all placeholder</span>\r\n        <input name='text1'><span class=\"error_msg\" data-for=\"text1\">error for text1 placeholder</span><br>\r\n        <input name='text2'><span class=\"error_msg\" data-for=\"text2\">error for text2 placeholder</span><br>\r\n        <input type=\"submit\">\r\n    </form>\r\n    <script>\r\n    $(function(){\r\n        $('form').submit(function(){\r\n            $(this).formPost()\r\n            .then(function(res){\r\n                location.href=\"post_success.html\";\r\n            }).fail(function(res){\r\n                if (res.systemerror) { alert('failed for some server reason:'+res.systemerror; }\r\n                if (res.ajaxerror) { alert('failed for some netowrk reason:'+res.ajaxerror; }\r\n            });\r\n            return false;\r\n        }).find('.error_msg[data-for]').css('display':'none');\r\n    });\r\n    </script>\r\n\r\nexpected server response:\r\n\r\n    success\r\n        -> { success:true; }\r\n    validation error\r\n        -> {\r\n                errors:{\r\n                    '<field name>:'<reason>'\r\n                             :\r\n                }\r\n           }\r\n    serverside system error\r\n        -> { systemerror:'<reason>'; }\r\n\r\n\r\njquery-datatmpl.js\r\n------------------\r\n\r\nHTML DOM based template.\r\n\r\n    $(elem).dataTmpl(context, options)\r\n    or\r\n    var tmpl = new $.DataTmpl(target);\r\n    tmpl.render(context);\r\n\r\nThis tempalte mapped object values to HTML elements with 'data-tmpl' (as key of values).\r\n\r\nex)\r\n\r\n    <script>\r\n    $(function(){\r\n    $(\"target\").dataTmpl({\r\n        str:'string',\r\n        nest:{\r\n            nested:'nested'\r\n        },\r\n        array:[\r\n            { data:1 },\r\n            { data:2 }\r\n        ],\r\n        now:new Date(),\r\n        html:{\r\n            '@as_html':true,\r\n            '@html':'some <b>HTML</b> contents',\r\n            '@style':{ 'font-weight':'bold' },\r\n            'class':'someclass'\r\n        },\r\n    });\r\n    });\r\n    </script>\r\n    \r\n    <target>\r\n        <span data-tmpl=\"str\">str placeholder</span>\r\n        <div data-tmpl=\"nest\">\r\n            <div data-tmpl=\"nest.nested\">nest.nested placeholder</div>\r\n        </div>\r\n        <div data-tmpl=\"array\">\r\n            <span data-tmpl=\"array:data>array[x].data placeholder</span>\r\n        </div>\r\n        <div data-tmpl=\"now\">formatted as yyyy/MM/dd HH:mm:ss</div>\r\n        <div data-tmpl=\"html\">html placeholder</div>\r\n    </target>\r\n\r\nDataTmpl object can update dynamically.\r\n\r\n    tmpl.update(extend_context);\r\n\r\n    var affected = tmpl.spliceRows(\"<key for array>\", position, delete_count, insert_array);\r\n    var affected = tmpl.appendRows(\"<key for array>\", insert_array);\r\n    tmpl.prependRows(\"<key for array>\", insert_array);\r\n    tmpl.insertRows(\"<key for array>\", pos, insert_array);\r\n    tmpl.deleteRows(\"<key for array>\", pos, delete_count);\r\n\r\nand selectable.\r\n\r\n    tmpl.selectRows(\"<key for array>\", pos, count)\r\n\r\nex)\r\n\r\n    tmpl.update({ \"array\":[{ data:\"updated row1\"}] });\r\n        -> replace context.array to [ { data:\"updated row1\" } ] and refresh all\r\n    tmpl.appendRows(\"array\", [{ data:\"row1\" }, { data:\"row2\" }]);\r\n        -> append [{ data:\"row1\" }, { data:\"row2\" }] to context.array and append new elements\r\n    tmpl.deleteRows(\"array\", 1, 2);\r\n        -> delete context.array[1],context.arra[2] and remove elements\r\n    tmpl.selectRows(\"array\", 0, 10).fadeOut(function(){\r\n        tmpl.deleteRows(\"array\", 0, 1);\r\n    });\r\n        -> delete context.array[0] to array[9] and remove elements\r\n","tagline":"jQuery Plugins - typeOf, closure, dateformat, numberformat, form utils (get,set,post), HTML based template","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}